{
    "models": [
        {
            "classname": "Customer",
            "code": "class Customer(Base):\n    \"\"\"\n    description: Table for storing customer information including their details.\n    \"\"\"\n    __tablename__ = 'Customers'\n\n    id = Column(Integer, primary_key=True, autoincrement=True)\n    name = Column(String)\n    email = Column(String)\n    phone = Column(String)\n    created_date = Column(DateTime, default=datetime.utcnow)\n    address = Column(String)\n    balance = Column(Integer)\n    credit_limit = Column(Integer)",
            "sqlite_create": "CREATE TABLE Customers (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    email TEXT,\n    phone TEXT,\n    created_date DATETIME DEFAULT CURRENT_TIMESTAMP,\n    address TEXT,\n    balance INTEGER,\n    credit_limit INTEGER\n);",
            "description": "Table for storing customer information including their details.",
            "name": "customers_table"
        },
        {
            "classname": "Order",
            "code": "class Order(Base):\n    \"\"\"\n    description: Table for storing order information including referencing customers and containing notes.\n    \"\"\"\n    __tablename__ = 'Orders'\n\n    id = Column(Integer, primary_key=True, autoincrement=True)\n    order_date = Column(DateTime, default=datetime.utcnow)\n    customer_id = Column(Integer, ForeignKey('Customers.id'))\n    notes = Column(String)\n    amount_total = Column(Integer)",
            "sqlite_create": "CREATE TABLE Orders (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    order_date DATETIME DEFAULT CURRENT_TIMESTAMP,\n    customer_id INTEGER,\n    notes TEXT,\n    amount_total INTEGER,\n    FOREIGN KEY (customer_id) REFERENCES Customers(id)\n);",
            "description": "Table for storing order information including referencing customers and containing notes.",
            "name": "orders_table"
        },
        {
            "classname": "Product",
            "code": "class Product(Base):\n    \"\"\"\n    description: Table representing products available in the store.\n    \"\"\"\n    __tablename__ = 'Products'\n\n    id = Column(Integer, primary_key=True, autoincrement=True)\n    name = Column(String)\n    description = Column(String)\n    price = Column(Integer)\n    stock_quantity = Column(Integer)",
            "sqlite_create": "CREATE TABLE Products (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT,\n    description TEXT,\n    price INTEGER,\n    stock_quantity INTEGER\n);",
            "description": "Table representing products available in the store.",
            "name": "products_table"
        },
        {
            "classname": "Item",
            "code": "class Item(Base):\n    \"\"\"\n    description: Table representing items within an order, linking products and orders.\n    \"\"\"\n    __tablename__ = 'Items'\n\n    id = Column(Integer, primary_key=True, autoincrement=True)\n    order_id = Column(Integer, ForeignKey('Orders.id'))\n    product_id = Column(Integer, ForeignKey('Products.id'))\n    quantity = Column(Integer)\n    price = Column(Integer)\n    amount = Column(Integer)\n    unit_price = Column(Integer)",
            "sqlite_create": "CREATE TABLE Items (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    order_id INTEGER,\n    product_id INTEGER,\n    quantity INTEGER,\n    price INTEGER,\n    amount INTEGER,\n    unit_price INTEGER,\n    FOREIGN KEY (order_id) REFERENCES Orders(id),\n    FOREIGN KEY (product_id) REFERENCES Products(id)\n);",
            "description": "Table representing items within an order, linking products and orders.",
            "name": "items_table"
        }
    ],
    "rules": [
        {
            "name": "Customer Balance Sum Rule",
            "description": "Customer balance is calculated as the sum of unpaid order totals.",
            "use_case": "Balance Calculation",
            "entity": "Customer",
            "code": "Rule.sum(derive=Customer.balance, as_sum_of=Order.amount_total, where=lambda row: row.notes != 'Paid')"
        },
        {
            "name": "Order Amount Total Sum Rule",
            "description": "Order amount_total is calculated as the sum of item amounts.",
            "use_case": "Order Total Calculation",
            "entity": "Order",
            "code": "Rule.sum(derive=Order.amount_total, as_sum_of=Item.amount)"
        },
        {
            "name": "Item Amount Calculation",
            "description": "Item amount is calculated based on the quantity and unit price.",
            "use_case": "Item Amount Calculation",
            "entity": "Item",
            "code": "Rule.formula(derive=Item.amount, as_expression=lambda row: row.quantity * row.unit_price)"
        },
        {
            "name": "Item Unit Price Copy Rule",
            "description": "Item unit price is copied from the Product's unit price.",
            "use_case": "Unit Price Copy",
            "entity": "Item",
            "code": "Rule.copy(derive=Item.unit_price, from_parent=Product.price)"
        },
        {
            "name": "Customer Credit Limit Constraint",
            "description": "Enforces that customer balance must not exceed the credit limit.",
            "use_case": "Credit Enforcement",
            "entity": "Customer",
            "code": "Rule.constraint(validate=Customer, as_condition=lambda row: row.balance <= row.credit_limit, error_msg=\"Customer balance ({row.balance}) exceeds credit limit ({row.credit_limit})\")"
        }
    ],
    "test_data": "Test data populates initial examples of each major entity, showing typical real-world data.\nThis simplifies demonstration for interactive queries to verify business rules and calculations.",
    "test_data_rows": [
        {
            "test_data_row_variable": "customer1",
            "code": "customer1 = Customer(name=\"John Doe\", email=\"john.doe@example.com\", phone=\"1234567890\", address=\"123 Elm St, Springfield\", balance=0, credit_limit=5000)"
        },
        {
            "test_data_row_variable": "customer2",
            "code": "customer2 = Customer(name=\"Jane Smith\", email=\"jane.smith@example.com\", phone=\"0987654321\", address=\"456 Maple Ave, Greenville\", balance=0, credit_limit=7500)"
        },
        {
            "test_data_row_variable": "customer3",
            "code": "customer3 = Customer(name=\"Alice Johnson\", email=\"alice.j@example.com\", phone=\"5551234567\", address=\"789 Pine Rd, Hilltown\", balance=0, credit_limit=6000)"
        },
        {
            "test_data_row_variable": "customer4",
            "code": "customer4 = Customer(name=\"Bob Brown\", email=\"bob.b@example.com\", phone=\"5559876543\", address=\"321 Oak Dr, Lakecity\", balance=0, credit_limit=8000)"
        },
        {
            "test_data_row_variable": "order1",
            "code": "order1 = Order(order_date=date(2023, 1, 10), customer_id=1, notes=\"Pending\", amount_total=0)"
        },
        {
            "test_data_row_variable": "order2",
            "code": "order2 = Order(order_date=date(2023, 1, 15), customer_id=2, notes=\"Pending\", amount_total=0)"
        },
        {
            "test_data_row_variable": "order3",
            "code": "order3 = Order(order_date=date(2023, 1, 20), customer_id=3, notes=\"Pending\", amount_total=0)"
        },
        {
            "test_data_row_variable": "order4",
            "code": "order4 = Order(order_date=date(2023, 1, 25), customer_id=4, notes=\"Pending\", amount_total=0)"
        },
        {
            "test_data_row_variable": "product1",
            "code": "product1 = Product(name=\"Laptop\", description=\"15-inch screen, 8GB RAM\", price=1000, stock_quantity=50)"
        },
        {
            "test_data_row_variable": "product2",
            "code": "product2 = Product(name=\"Smartphone\", description=\"64GB, Dual SIM\", price=800, stock_quantity=100)"
        },
        {
            "test_data_row_variable": "product3",
            "code": "product3 = Product(name=\"Headphones\", description=\"Noise cancelling\", price=150, stock_quantity=200)"
        },
        {
            "test_data_row_variable": "product4",
            "code": "product4 = Product(name=\"Monitor\", description=\"27-inch 4K display\", price=300, stock_quantity=75)"
        },
        {
            "test_data_row_variable": "item1",
            "code": "item1 = Item(order_id=1, product_id=1, quantity=2, price=950, amount=2000, unit_price=1000)"
        },
        {
            "test_data_row_variable": "item2",
            "code": "item2 = Item(order_id=2, product_id=2, quantity=1, price=800, amount=800, unit_price=800)"
        },
        {
            "test_data_row_variable": "item3",
            "code": "item3 = Item(order_id=3, product_id=3, quantity=3, price=145, amount=450, unit_price=150)"
        },
        {
            "test_data_row_variable": "item4",
            "code": "item4 = Item(order_id=4, product_id=4, quantity=1, price=290, amount=300, unit_price=300)"
        }
    ],
    "test_data_sqlite": "INSERT INTO Customers (name, email, phone, created_date, address, balance, credit_limit) VALUES \n('John Doe', 'john.doe@example.com', '1234567890', CURRENT_TIMESTAMP, '123 Elm St, Springfield', 0, 5000),\n('Jane Smith', 'jane.smith@example.com', '0987654321', CURRENT_TIMESTAMP, '456 Maple Ave, Greenville', 0, 7500),\n('Alice Johnson', 'alice.j@example.com', '5551234567', CURRENT_TIMESTAMP, '789 Pine Rd, Hilltown', 0, 6000),\n('Bob Brown', 'bob.b@example.com', '5559876543', CURRENT_TIMESTAMP, '321 Oak Dr, Lakecity', 0, 8000);\n\nINSERT INTO Orders (order_date, customer_id, notes, amount_total) VALUES \n('2023-01-10', 1, 'Pending', 0),\n('2023-01-15', 2, 'Pending', 0),\n('2023-01-20', 3, 'Pending', 0),\n('2023-01-25', 4, 'Pending', 0);\n\nINSERT INTO Products (name, description, price, stock_quantity) VALUES \n('Laptop', '15-inch screen, 8GB RAM', 1000, 50),\n('Smartphone', '64GB, Dual SIM', 800, 100),\n('Headphones', 'Noise cancelling', 150, 200),\n('Monitor', '27-inch 4K display', 300, 75);\n\nINSERT INTO Items (order_id, product_id, quantity, price, amount, unit_price) VALUES \n(1, 1, 2, 950, 2000, 1000),\n(2, 2, 1, 800, 800, 800),\n(3, 3, 3, 145, 450, 150),\n(4, 4, 1, 290, 300, 300);",
    "name": "Enhanced_Sales_System"
}